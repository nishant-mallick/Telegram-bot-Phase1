import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = '7240022324:AAGciK3XjufQJvL4VqP4aIgJKcUGNNeNiTY'  # Replace with your actual Telegram bot token
BOT_USERNAME = '@protopulpitbot'

# Knowledge base for handling queries (replace with your actual knowledge base implementation)
knowledge_base = {
    "What is the capital of France?": "Paris",
    "How do I create a Telegram bot?": "Refer to Telegram's BotFather and official documentation for detailed instructions.",
    # Add more questions and answers to your knowledge base here
}


async def send_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "Hello from Pulpit, how can I assist you?"

    markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("Post Ride", callback_data="post_ride"),
            InlineKeyboardButton("Queries", callback_data="queries")
        ]
    ])
    await update.message.reply_text(msg, reply_markup=markup)


async def handle_post_ride(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Acknowledge the callback query

    await query.message.reply_text("Please provide your ride details (origin, destination, date, time, etc.):")

    # Implement logic to capture additional ride details (e.g., using another message handler)
    # ... (replace with your ride details capturing logic)

    # Simulate successful ride posting (replace with actual ride posting logic)
    await query.message.reply_text("Your ride has been successfully posted!")

    # Offer further assistance
    await send_options(update, context)


async def handle_queries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Acknowledge the callback query

    user_query = update.message.text.lower()  # Get the user's query in lowercase

    if user_query in knowledge_base:
        answer = knowledge_base[user_query]
    else:
        answer = "Sorry, I couldn't find an answer to your query in my knowledge base. Try rephrasing it or providing more context."

    await query.message.reply_text(answer)

    # Offer further assistance
    await send_options(update, context)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    if query.data == "post_ride":
        await handle_post_ride(update, context)
    elif query.data == "queries":
        await handle_queries(update, context)


if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    # Handle all text messages
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_options))

    # Handle callback queries
    app.add_handler(CallbackQueryHandler(handle_callback_query))

    print(f'Bot @{BOT_USERNAME} is polling...')
    app.run_polling()
